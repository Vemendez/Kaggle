{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Binary Classification of Insurance Cross Selling Model**","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-23T01:22:15.464565Z","iopub.execute_input":"2024-07-23T01:22:15.464960Z","iopub.status.idle":"2024-07-23T01:22:15.473284Z","shell.execute_reply.started":"2024-07-23T01:22:15.464933Z","shell.execute_reply":"2024-07-23T01:22:15.472008Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e7/sample_submission.csv\n/kaggle/input/playground-series-s4e7/train.csv\n/kaggle/input/playground-series-s4e7/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**First we read both training and testing data en check out the columns.**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv', index_col='id')\nX_test_full = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv', index_col='id')\n\nX.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-23T01:22:51.953294Z","iopub.execute_input":"2024-07-23T01:22:51.953723Z","iopub.status.idle":"2024-07-23T01:23:22.890115Z","shell.execute_reply.started":"2024-07-23T01:22:51.953690Z","shell.execute_reply":"2024-07-23T01:23:22.888494Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"    Gender  Age  Driving_License  Region_Code  Previously_Insured Vehicle_Age  \\\nid                                                                              \n0     Male   21                1         35.0                   0    1-2 Year   \n1     Male   43                1         28.0                   0   > 2 Years   \n2   Female   25                1         14.0                   1    < 1 Year   \n3   Female   35                1          1.0                   0    1-2 Year   \n4   Female   36                1         15.0                   1    1-2 Year   \n\n   Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  Response  \nid                                                                          \n0             Yes         65101.0                 124.0      187         0  \n1             Yes         58911.0                  26.0      288         1  \n2              No         38043.0                 152.0      254         0  \n3             Yes          2630.0                 156.0       76         0  \n4              No         31951.0                 152.0      294         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Response</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>21</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>1-2 Year</td>\n      <td>Yes</td>\n      <td>65101.0</td>\n      <td>124.0</td>\n      <td>187</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>43</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>&gt; 2 Years</td>\n      <td>Yes</td>\n      <td>58911.0</td>\n      <td>26.0</td>\n      <td>288</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Female</td>\n      <td>25</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>&lt; 1 Year</td>\n      <td>No</td>\n      <td>38043.0</td>\n      <td>152.0</td>\n      <td>254</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1-2 Year</td>\n      <td>Yes</td>\n      <td>2630.0</td>\n      <td>156.0</td>\n      <td>76</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>36</td>\n      <td>1</td>\n      <td>15.0</td>\n      <td>1</td>\n      <td>1-2 Year</td>\n      <td>No</td>\n      <td>31951.0</td>\n      <td>152.0</td>\n      <td>294</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**We remove rows with missing target and separate the target from the other variables.**","metadata":{}},{"cell_type":"code","source":"\n# Remove rows with missing target, separate target from predictors\nif 'Response' in X.columns:\n    X.dropna(axis=0, subset=['Response'], inplace=True)\n    y = X.Response              \n    X.drop(['Response'], axis=1, inplace=True)\nelse:\n    print('Response column already dropped')","metadata":{"execution":{"iopub.status.busy":"2024-07-23T01:23:26.005597Z","iopub.execute_input":"2024-07-23T01:23:26.006125Z","iopub.status.idle":"2024-07-23T01:23:27.410324Z","shell.execute_reply.started":"2024-07-23T01:23:26.006083Z","shell.execute_reply":"2024-07-23T01:23:27.409050Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"**We handle categorical variables by creating a preprocessing pipeline that scales numerical values and applies one-hot encoding to categoriacal values**","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\n\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                 random_state=0)\n\n# Select numeric columns\nnumeric_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Select categorical columns\ncategorical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype == \"object\"]\n\n# Preprocessing numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), numeric_cols),\n        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)\n    ])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-23T01:23:30.353162Z","iopub.execute_input":"2024-07-23T01:23:30.353675Z","iopub.status.idle":"2024-07-23T01:23:37.519537Z","shell.execute_reply.started":"2024-07-23T01:23:30.353636Z","shell.execute_reply":"2024-07-23T01:23:37.518290Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"**We use Random Forest model to train it and evaluate the results with ROC AUC score**","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nimport lightgbm as lgb\n\n# Define the model\nmodel = lgb.LGBMClassifier(n_estimators=100, random_state=0)\n\n# Bundle preprocessing and model in a pipeline\nclf = Pipeline(steps = [('preprocessor', preprocessor),\n                        ('model', model)\n                       ])\n\n# Preprocessing of training data, fit model\nclf.fit(X_train_full, y_train)\n\n# Get predictions\npreds = clf.predict_proba(X_valid_full)[:, 1]\n\n# Evaluate model\nscore = roc_auc_score(y_valid, preds)\nprint('AUC ROC score:', score)","metadata":{"execution":{"iopub.status.busy":"2024-07-23T01:28:59.037349Z","iopub.execute_input":"2024-07-23T01:28:59.037748Z","iopub.status.idle":"2024-07-23T01:31:16.376562Z","shell.execute_reply.started":"2024-07-23T01:28:59.037718Z","shell.execute_reply":"2024-07-23T01:31:16.374860Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 1132063, number of negative: 8071775\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.624749 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 726\n[LightGBM] [Info] Number of data points in the train set: 9203838, number of used features: 14\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.122999 -> initscore=-1.964332\n[LightGBM] [Info] Start training from score -1.964332\nAUC ROC score: 0.8753413777250469\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Finally we predict the testing data and submit the results to submission.csv**","metadata":{}},{"cell_type":"code","source":"# Preprocess test data and get predictions\npreds_test = clf.predict_proba(X_test_full)[:, 1]\n\n# Create submission file\noutput = pd.DataFrame({'id': X_test_full.index,\n                       'Response': preds_test})\noutput.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-23T01:34:06.504408Z","iopub.execute_input":"2024-07-23T01:34:06.504817Z","iopub.status.idle":"2024-07-23T01:35:35.361797Z","shell.execute_reply.started":"2024-07-23T01:34:06.504772Z","shell.execute_reply":"2024-07-23T01:35:35.360677Z"},"trusted":true},"execution_count":13,"outputs":[]}]}